Transformation steps, from direct-style environment-passing
quine-generating interpreter to CESK machine.

use quine generation as the canary in the coal mine--if any of our transformations break quine generation, we want to fix that

1) original direct-style, environment-passing interpreter, with quote
and list, from 2012 Scheme Workshop quines paper

(with updated mk.scm, which generalizes absento)

2) add store argument to eval-expo, which now returns (value . store)
pairs as answers; update lookupo to use the store as well as the env,
and to use symbolo and numbero constraints

3) improve lookupo, to take advantage of bounded env length, for better divergence behavior, and to recapture quine generation.  I had a comment to myself:

;;; it may be possible to avoid having to bound the length of env to
;;; be no greater than the length of store through clever use of
;;; noo/absento.  For now, however, we'll stick with the bound.

Is there anything to this?

4) add set!

5) CPS interpreter

6) reconnect the wires

7) add call/cc (careful with the wires!)



*** skip this step!!!! ***  include in 'other improvements section at the end'
4) update lookupo once again, to use more sophisticated rep of env and store, and better impl of not-in-envo using absento (where should this step go?  is this really an improvement?  From the standpoint of a pearl, this greatly complicates the code.  Perhaps better to mention this in a footnote, or in a short section at the end: 'other improvements'.)
