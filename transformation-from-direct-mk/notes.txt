scheme append -> CPS -> miniKanrenize

is not the same as

scheme append -> miniKanrenize -> CPS

because of goal reordering.  In the latter case, can place the recursive call to appendo last before CPSing (basically, we can pick which continuation we want to create--we can CPS for any goal ordering, with differences in divergence behavior, but not semantics).  In the first case, we are stuck because CPS of the Scheme function will ensure the call to appendo is in tail position, and construction of the "output list" occurs in the continuation.  This is why we need the reconnecting the wires trick.


In othe words...

*why CPS breaks the wire*:

It's really about making sure recursive goals happen last.  You can ensure this happens if you miniKanrenize, then CPS.  In fact, every goal ordering has a meaningful CPS.  But if you CPS in Scheme, then miniKanrenize, the simple goals that could cause termination are now "trapped" in the continuation, and happen too late


??? Does the reconnecting the wires technique work when CPSing in mK, when the appendo call isn't in tail position?

??? Does miniKanrenizing, then CPSing, the interpreter help with the diverence behavior of call/cc? (where the reconnecting trick doesn't seem to work?)

??? Nada asks is this approach of miniKanrenizing, then CPSing, helps with the problem of poor divergence behavior when k is unknown    Good question!   We might still be able to generate quines.  I suspect run* will often (always) divergerce, although perhaps there is a way around this.

??? I still don't completely understand the role of the out^ argument to the continuation.  Seems to be used differently between code that is CPSed first vs code that is CPSed later. See appendo-cpso for apparent WATness.



Commutativity diagram:

direct-style Scheme prog        CPS->    CPS Scheme prog
         |                                     |
	 |                                     |
   miniKanrenize->                       miniKanrenize->
         |                                     |
	 |                                     |
unnested mk prog	        CPS->       mk CPS prog
(not really direct style)

Doesn't seem to quite work the same, since unnesting is similar to ANF


This may be more correct:

direct-style Scheme prog    ANF->    ANF Scheme prog    CPS->    ANF CPS Scheme prog
         |                                   |                           |
	 |                                   |                           |
   miniKanrenize->                    miniKanrenize->              miniKanrenize->
         |                                   |                           |
	 |                                   |                           |
   unnested mk prog                  unnested mk prog	 CPS->    mk unnested CPS prog
   (similar to ANF)               **??? WAT iz dis???**
         [? are these two mk progs identical?]



? Does ANF break the wires?  Or only CPS?  Why?  [looks like only CPS]

? Do we end up with an equivalent mk CPS prog with both approaches?

? What is the right way to CPS an mk program?  Do both higher-order and first order continuation representations make sense?  Would k be a goal?  What is the connection between the out variable and k?  Are they the same thing?  Exactly what does a continuation represent?  How does reordering goals/independence of goal ordering interact with CPS?  We already did an unnesting step, which is reminiscent of ANF--are we really going from ANF to CPS?  Was the ordering in a sense fixed during the ANF step?

? Is CPSing an mk program related to, or identical to, re-connecting the wires somehow?

? How is re-connecting the wires related to the two approaches?

? what are the formal rules/algorithms for reconnecting the wires?
